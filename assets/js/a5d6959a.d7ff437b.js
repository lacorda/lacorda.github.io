"use strict";(self.webpackChunklacorda_github_io=self.webpackChunklacorda_github_io||[]).push([[3299],{58860:(e,n,t)=>{t.d(n,{xA:()=>d,yg:()=>f});var r=t(37953);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var i=r.createContext({}),l=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},d=function(e){var n=l(e.components);return r.createElement(i.Provider,{value:n},e.children)},m="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),m=l(t),u=o,f=m["".concat(i,".").concat(u)]||m[u]||g[u]||a;return t?r.createElement(f,c(c({ref:n},d),{},{components:t})):r.createElement(f,c({ref:n},d))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,c=new Array(a);c[0]=u;var s={};for(var i in n)hasOwnProperty.call(n,i)&&(s[i]=n[i]);s.originalType=e,s[m]="string"==typeof e?e:o,c[1]=s;for(var l=2;l<a;l++)c[l]=t[l];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},29065:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>c,default:()=>g,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=t(75890),o=(t(37953),t(58860));const a={description:"offscreen",slug:"/0579a28",tags:["offscreen"]},c="offscreen \u79bb\u5c4f\u6587\u6863",s={unversionedId:"Chrome\u7bc7/Chrome\u63d2\u4ef6/API/offscreen",id:"Chrome\u7bc7/Chrome\u63d2\u4ef6/API/offscreen",title:"offscreen \u79bb\u5c4f\u6587\u6863",description:"offscreen",source:"@site/01.docs/05.Chrome\u7bc7/02.Chrome\u63d2\u4ef6/03.API/11.offscreen.md",sourceDirName:"05.Chrome\u7bc7/02.Chrome\u63d2\u4ef6/03.API",slug:"/0579a28",permalink:"/docs/0579a28",draft:!1,editUrl:"https://github.com/lacorda/lacorda.github.io/blob/master/docs/01.docs/05.Chrome\u7bc7/02.Chrome\u63d2\u4ef6/03.API/11.offscreen.md",tags:[{label:"offscreen",permalink:"/docs/tags/offscreen"}],version:"current",lastUpdatedBy:"Lacorda",lastUpdatedAt:1704274640,formattedLastUpdatedAt:"2024\u5e741\u67083\u65e5",sidebarPosition:11,frontMatter:{description:"offscreen",slug:"/0579a28",tags:["offscreen"]},sidebar:"tutorialSidebar",previous:{title:"notifications \u901a\u77e5",permalink:"/docs/0b75e5b"},next:{title:"permissions \u6743\u9650",permalink:"/docs/9f71573"}},i={},l=[{value:"\u6743\u9650\u8bbe\u7f6e",id:"\u6743\u9650\u8bbe\u7f6e",level:2},{value:"\u65b9\u6cd5",id:"\u65b9\u6cd5",level:2},{value:"createDocument() \u521b\u5efa\u79bb\u5c4f\u6587\u6863",id:"createdocument-\u521b\u5efa\u79bb\u5c4f\u6587\u6863",level:3},{value:"closeDocument() \u5173\u95ed\u79bb\u5c4f\u6587\u6863",id:"closedocument-\u5173\u95ed\u79bb\u5c4f\u6587\u6863",level:3},{value:"\u793a\u4f8b",id:"\u793a\u4f8b",level:2},{value:"GEO\u5b9a\u4f4d",id:"geo\u5b9a\u4f4d",level:3},{value:"\u590d\u5236\u7c98\u8d34",id:"\u590d\u5236\u7c98\u8d34",level:3},{value:"\u89e3\u6790DOM",id:"\u89e3\u6790dom",level:3},{value:"\u7f51\u9875\u5f55\u5236",id:"\u7f51\u9875\u5f55\u5236",level:3}],d={toc:l},m="wrapper";function g(e){let{components:n,...t}=e;return(0,o.yg)(m,(0,r.A)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"offscreen-\u79bb\u5c4f\u6587\u6863"},"offscreen \u79bb\u5c4f\u6587\u6863"),(0,o.yg)("p",null,(0,o.yg)("a",{parentName:"p",href:"https://developer.chrome.com/docs/extensions/reference/offscreen/"},"\u5b98\u65b9\u6587\u6863")),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"\u5141\u8bb8\u7528\u6237\u5728\u540e\u53f0\u7ebf\u7a0b\u4e2d\u521b\u5efa\u79bb\u5c4f\u753b\u5e03")),(0,o.yg)("h2",{id:"\u6743\u9650\u8bbe\u7f6e"},"\u6743\u9650\u8bbe\u7f6e"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-json"},'"permissions": [\n  "offscreen"\n],\n')),(0,o.yg)("h2",{id:"\u65b9\u6cd5"},"\u65b9\u6cd5"),(0,o.yg)("h3",{id:"createdocument-\u521b\u5efa\u79bb\u5c4f\u6587\u6863"},"createDocument() \u521b\u5efa\u79bb\u5c4f\u6587\u6863"),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"\u521b\u5efa\u79bb\u5c4f\u6587\u6863")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-ts"},'type Reason = (\n  "TESTING" |              // \u6d4b\u8bd5\u76ee\u7684\n  "AUDIO_PLAYBACK" |       // \u64ad\u653e\u97f3\u9891\n  "IFRAME_SCRIPTING" |     // \u5d4c\u5165 iframe \u5e76\u7f16\u5199\u811a\u672c\n  "DOM_SCRAPING" |         // \u6293\u53d6 DOM \u4ee5\u63d0\u53d6\u4fe1\u606f\n  "BLOBS" |                // \u4e0e Blob \u5bf9\u8c61\uff08\u5305\u62ec URL.createObjectURL() \uff09\u8fdb\u884c\u4ea4\u4e92\n  "DOM_PARSER" |           // \u89e3\u6790 DOM, new DomParser()\n  "USER_MEDIA" |           // \u4e0e\u6765\u81ea\u7528\u6237\u5a92\u4f53\u7684\u5a92\u4f53\u6d41\u8fdb\u884c\u4ea4\u4e92  getUserMedia()\n  "DISPLAY_MEDIA" |        // \u4e0e\u6765\u81ea\u663e\u793a\u5a92\u4f53\u7684\u5a92\u4f53\u6d41\u8fdb\u884c\u4ea4\u4e92\uff08\u4f8b\u5982 getDisplayMedia() \n  "WEB_RTC" |              // RTC\n  "CLIPBOARD" |            // \u526a\u8d34\u677f\n  "LOCAL_STORAGE" |        // \u672c\u5730\u5b58\u50a8\n  "WORKERS" |              // Web Workers\n  "BATTERY_STATUS" |       // \u7535\u6c60\u72b6\u6001\uff0cnavigator.getBattery()\n  "MATCH_MEDIA" |          // window.matchMedia\n  "GEOLOCATION"            // \u5730\u7406\u4f4d\u7f6e, navigator.geolocation()\n);\ntype CreateParameters = {\n  // \u5f00\u53d1\u4eba\u5458\u63d0\u4f9b\u7684\u5b57\u7b26\u4e32\uff0c\u66f4\u8be6\u7ec6\u5730\u89e3\u91ca\u4e86\u5bf9\u540e\u53f0\u4e0a\u4e0b\u6587\u7684\u9700\u6c42\n  justification?: string;\n  // \u7528\u4e8e\u521b\u5efa\u79bb\u5c4f\u6587\u6863\u7684\u539f\u56e0\uff0c\u5217\u51fa\u4e86\u5e94\u7528\u573a\u666f\n  reasons?: Reason[];\n\n  // \u76f8\u5bf9\u4e8e\u5f53\u524d\u6587\u6863\u7684URL\n  url: string;\n}\n\nchrome.offscreen.createDocument(parameters:  CreateParameters,callback?: function)\n')),(0,o.yg)("h3",{id:"closedocument-\u5173\u95ed\u79bb\u5c4f\u6587\u6863"},"closeDocument() \u5173\u95ed\u79bb\u5c4f\u6587\u6863"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-ts"},"chrome.offscreen.closeDocument(callback?: function)\n")),(0,o.yg)("h2",{id:"\u793a\u4f8b"},"\u793a\u4f8b"),(0,o.yg)("h3",{id:"geo\u5b9a\u4f4d"},"GEO\u5b9a\u4f4d"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js"},"// background.js\nchrome.action.onClicked.addListener(async () => {\n  await chrome.offscreen.createDocument({\n    url: '/offscreen.html',\n    reasons: [\n      chrome.offscreen.Reason.GEOLOCATION ||\n        chrome.offscreen.Reason.DOM_SCRAPING\n    ],\n    justification: 'add justification for geolocation use here'\n  });\n\n  const geolocation = await chrome.runtime.sendMessage({\n    type: 'get-geolocation',\n    target: 'offscreen'\n  });\n\n  await chrome.offscreen.closeDocument();\n  return geolocation;\n});\n")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-html"},'\x3c!-- offscreen.html --\x3e\n<!DOCTYPE html>\n<script src="offscreen.js"><\/script>\n')),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js"},"// offscreen.js\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n  if (message.target !== 'offscreen') {\n    return false;\n  }\n\n  if (message.type !== 'get-geolocation') {\n    console.warn(`Unexpected message type received: '${message.type}'.`);\n    return;\n  }\n\n  getGeolocation().then((geolocation) => {\n    console.log('getGeolocation', geolocation);\n    sendResponse(geolocation)\n  });\n  return true;\n})\n\nfunction clone(obj) {\n  const copy = {};\n  if (obj === null || !(obj instanceof Object)) {\n    return obj;\n  } else {\n    for (const p in obj) {\n      copy[p] = clone(obj[p]);\n    }\n  }\n  return copy;\n}\n\nasync function getGeolocation() {\n  return new Promise((resolve, reject) => {\n    navigator.geolocation.getCurrentPosition(\n      (loc) => resolve(clone(loc)),\n      (err) => reject(err)\n    );\n  });\n}\n")),(0,o.yg)("h3",{id:"\u590d\u5236\u7c98\u8d34"},"\u590d\u5236\u7c98\u8d34"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js"},"// background.js\nchrome.action.onClicked.addListener(async () => {\n  await chrome.offscreen.createDocument({\n    url: 'offscreen.html',\n    reasons: [chrome.offscreen.Reason.CLIPBOARD],\n    justification: 'Write text to the clipboard.'\n  });\n\n  chrome.runtime.sendMessage({\n    type: 'copy-data-to-clipboard',\n    target: 'offscreen-doc',\n    data: value\n  });\n});\n")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-html"},'\x3c!-- offscreen.html --\x3e\n<!DOCTYPE html>\n<textarea id="text"></textarea>\n<script src="offscreen.js"><\/script>\n')),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js"},"// offscreen.js\nchrome.runtime.onMessage.addListener(async (message) => {\n  if (message.target !== 'offscreen-doc') {\n    return;\n  }\n\n  switch (message.type) {\n    case 'copy-data-to-clipboard':\n      handleClipboardWrite(message.data);\n      break;\n    default:\n      console.warn(`Unexpected message type received: '${message.type}'.`);\n  }\n});\n\nconst textEl = document.querySelector('#text');\n\nasync function handleClipboardWrite(data) {\n  try {\n    if (typeof data !== 'string') {\n      throw new TypeError(\n        `Value provided must be a 'string', got '${typeof data}'.`\n      );\n    }\n    \n    textEl.value = data;\n    textEl.select();\n    document.execCommand('copy');\n  } finally {\n    window.close();\n  }\n}\n")),(0,o.yg)("h3",{id:"\u89e3\u6790dom"},"\u89e3\u6790DOM"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js"},"// background.js\nchrome.action.onClicked.addListener(async () => {\n  await chrome.offscreen.createDocument({\n    url: 'offscreen.html',\n    reasons: [chrome.offscreen.Reason.DOM_PARSER],\n    justification: 'Parse the DOM.'\n  });\n\n  const dom = await chrome.runtime.sendMessage({\n    type: 'add-exclamationmarks-to-headings',\n    target: 'offscreen',\n    data: '<html><head></head><body><h1>Hello World</h1></body></html>'\n  });\n\n chrome.offscreen.closeDocument();\n});\n\nchrome.runtime.onMessage.addListener(async (message) => {\n  if (message.target !== 'background') {\n    return;\n  }\n\n  switch (message.type) {\n    case 'add-exclamationmarks-result':\n      console.log('Received dom', message.data);\n      chrome.offscreen.closeDocument();\n      break;\n    default:\n      console.warn(`Unexpected message type received: '${message.type}'.`);\n  }\n});\n")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-html"},'\x3c!-- offscreen.html --\x3e\n<!DOCTYPE html>\n<script src="offscreen.js"><\/script>\n')),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js"},"// offscreen.js\nchrome.runtime.onMessage.addListener(async (message) => {\n  if (message.target !== 'offscreen') {\n    return;\n  }\n\n  switch (message.type) {\n    case 'add-exclamationmarks-to-headings':\n      cconst parser = new DOMParser();\n      const document = parser.parseFromString(htmlString, 'text/html');\n      document.querySelectorAll('h1').forEach((heading) => (heading.textContent = heading.textContent + '!!!'));\n      chrome.runtime.sendMessage({\n        type: 'add-exclamationmarks-result',\n        target: 'background',\n        data: document.documentElement.outerHTML\n      });\n      break;\n    default:\n      console.warn(`Unexpected message type received: '${message.type}'.`);\n  }\n});\n")),(0,o.yg)("h3",{id:"\u7f51\u9875\u5f55\u5236"},"\u7f51\u9875\u5f55\u5236"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js"},"// background.js\nchrome.action.onClicked.addListener(async (tab) => {\n  const existingContexts = await chrome.runtime.getContexts({});\n  let recording = false;\n\n  const offscreenDocument = existingContexts.find(\n    (c) => c.contextType === 'OFFSCREEN_DOCUMENT'\n  );\n\n  // If an offscreen document is not already open, create one.\n  if (!offscreenDocument) {\n    // Create an offscreen document.\n    await chrome.offscreen.createDocument({\n      url: 'offscreen.html',\n      reasons: ['USER_MEDIA'],\n      justification: 'Recording from chrome.tabCapture API'\n    });\n  } else {\n    recording = offscreenDocument.documentUrl.endsWith('#recording');\n  }\n\n  if (recording) {\n    chrome.runtime.sendMessage({\n      type: 'stop-recording',\n      target: 'offscreen'\n    });\n    chrome.action.setIcon({ path: 'icons/not-recording.png' });\n    return;\n  }\n\n  // Get a MediaStream for the active tab.\n  const streamId = await chrome.tabCapture.getMediaStreamId({\n    targetTabId: tab.id\n  });\n\n  // Send the stream ID to the offscreen document to start recording.\n  chrome.runtime.sendMessage({\n    type: 'start-recording',\n    target: 'offscreen',\n    data: streamId\n  });\n\n  chrome.action.setIcon({ path: '/icons/recording.png' });\n});\n")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-html"},'\x3c!-- offscreen.html --\x3e\n<!DOCTYPE html>\n<script src="offscreen.js"><\/script>\n')),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js"},"// offscreen.js\nchrome.runtime.onMessage.addListener(async (message) => {\n  if (message.target === 'offscreen') {\n    switch (message.type) {\n      case 'start-recording':\n        startRecording(message.data);\n        break;\n      case 'stop-recording':\n        stopRecording();\n        break;\n      default:\n        throw new Error('Unrecognized message:', message.type);\n    }\n  }\n});\n\nlet recorder;\nlet data = [];\n\nasync function startRecording(streamId) {\n  if (recorder?.state === 'recording') {\n    throw new Error('Called startRecording while recording is in progress.');\n  }\n\n  const media = await navigator.mediaDevices.getUserMedia({\n    audio: {\n      mandatory: {\n        chromeMediaSource: 'tab',\n        chromeMediaSourceId: streamId\n      }\n    },\n    video: {\n      mandatory: {\n        chromeMediaSource: 'tab',\n        chromeMediaSourceId: streamId\n      }\n    }\n  });\n\n  const output = new AudioContext();\n  const source = output.createMediaStreamSource(media);\n  source.connect(output.destination);\n\n  recorder = new MediaRecorder(media, { mimeType: 'video/webm' });\n  recorder.ondataavailable = (event) => data.push(event.data);\n  recorder.onstop = () => {\n    const blob = new Blob(data, { type: 'video/webm' });\n    window.open(URL.createObjectURL(blob), '_blank');\n\n    recorder = undefined;\n    data = [];\n  };\n  recorder.start();\n\n  window.location.hash = 'recording';\n}\n\nasync function stopRecording() {\n  recorder.stop();\n\n  recorder.stream.getTracks().forEach((t) => t.stop());\n\n  window.location.hash = '';\n}\n")))}g.isMDXComponent=!0}}]);